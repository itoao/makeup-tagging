// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  name          String?
  bio           String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // リレーション
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  savedPosts    SavedPost[]
  followers     Follow[]    @relation("following")
  following     Follow[]    @relation("follower")

  @@index([username])
}

// フォロー関係
model Follow {
  id            String    @id @default(cuid())
  followerId    String
  followingId   String
  createdAt     DateTime  @default(now())
  
  // リレーション
  follower      User      @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following     User      @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// 投稿モデル
model Post {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  imageUrl      String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // リレーション
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          Tag[]
  likes         Like[]
  comments      Comment[]
  savedBy       SavedPost[]

  @@index([userId])
}

// いいねモデル
model Like {
  id            String    @id @default(cuid())
  userId        String
  postId        String
  createdAt     DateTime  @default(now())
  
  // リレーション
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// コメントモデル
model Comment {
  id            String    @id @default(cuid())
  content       String    @db.Text
  userId        String
  postId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // リレーション
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

// 保存された投稿モデル
model SavedPost {
  id            String    @id @default(cuid())
  userId        String
  postId        String
  createdAt     DateTime  @default(now())
  
  // リレーション
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// 製品カテゴリモデル
model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // リレーション
  products      Product[]
}

// ブランドモデル
model Brand {
  id            String    @id @default(cuid())
  name          String    @unique
  logoUrl       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // リレーション
  products      Product[]
}

// 製品モデル
model Product {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  price         Float?
  imageUrl      String?
  brandId       String
  categoryId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // リレーション
  brand         Brand     @relation(fields: [brandId], references: [id])
  category      Category  @relation(fields: [categoryId], references: [id])
  tags          Tag[]

  @@index([brandId])
  @@index([categoryId])
}

// タグモデル（画像上の製品タグ）
model Tag {
  id            String    @id @default(cuid())
  xPosition     Float     // 画像上のX座標（パーセンテージ）
  yPosition     Float     // 画像上のY座標（パーセンテージ）
  postId        String
  productId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // リレーション
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  product       Product   @relation(fields: [productId], references: [id])

  @@index([postId])
  @@index([productId])
}
